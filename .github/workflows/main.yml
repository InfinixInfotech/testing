name: CI/CD Pipeline for Frontend

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Run tests
      - name: Run Tests
        run: npm test

      # Build the project
      - name: Build Project
        run: npm run build

      # Upload build artifacts (optional, useful if you want to store build files)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/

  deploy:
    name: Deploy to Docker
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout code again
      - name: Checkout Code
        uses: actions/checkout@v3

      # Login to DockerHub (if using DockerHub, otherwise ignore or configure local registry)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image to local registry
      - name: Build and Push Docker Image
        run: |
          docker build -t 192.168.1.216:5000/infinixmailboxfrontend:latest .
          docker push 192.168.1.216:5000/infinixmailboxfrontend:latest

      # Deploy Docker Container to the local environment
      - name: Deploy Docker Container
        run: |
          echo "Pulling the latest Docker image from local registry..."
          docker pull 192.168.1.216:5000/infinixmailboxfrontend:latest
          echo "Running new container on port 80..."
          docker run -d -p 80:80 --name infinixmailboxfrontend 192.168.1.216:5000/infinixmailboxfrontend:latest
          echo "Checking if the container is running..."
          docker ps

